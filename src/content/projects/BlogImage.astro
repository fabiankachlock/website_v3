---
import maximizeIcon from '@carbon/icons/svg/32/maximize.svg?raw';
import minimizeIcon from '@carbon/icons/svg/32/minimize.svg?raw';
import type { LocalImageProps } from 'astro:assets';
import { t } from 'i18next';

import DynamicImage from '@/components/common/DynamicImage.astro';

export type Props = {
  dark: LocalImageProps['src'];
  light: LocalImageProps['src'];
  alt?: string;
  color?: 'text' | 'background' | 'primary' | 'secondary';
};

const { dark, light, alt, color } = Astro.props;
---

<div class="blog-image">
  <div class="blog-image__backdrop"></div>
  <div class="blog-image__wrapper">
    <DynamicImage dark={dark} light={light} class="blog-image__image" />
    <button
      aria-label={t('common.maximizeImage')}
      class="blog-image__action blog-image__action--maximize"
      class:list={{
        ['blog-image__action--' + (color ?? 'primary')]: true,
      }}
    >
      <Fragment set:html={maximizeIcon} />
    </button>

    <button
      aria-label={t('common.closeImage')}
      class="blog-image__action blog-image__action--minimize"
      class:list={{
        ['blog-image__action--' + (color ?? 'primary')]: true,
      }}
    >
      <Fragment set:html={minimizeIcon} />
    </button>
  </div>
  <p class="blog-image__alt">
    {alt}
  </p>
</div>

<style scoped lang="css">
  .blog-image {
    width: 100%;
    position: relative;
  }

  .blog-image__alt {
    text-align: center;
    color: var(--color-text-secondary);
    max-width: 100% !important;
  }

  .blog-image__wrapper {
    position: relative;
    width: 100%;
    overflow: hidden;
    margin-bottom: 0.5rem;
    cursor: pointer;
    transition: scale 140ms ease-in-out;
    max-width: 1024px;
    max-height: calc(100vh - 4rem);
  }

  :global(.blog-image__image) {
    width: auto;
    height: auto;
    max-width: 100%;
    max-height: 100%;
    margin: auto;
  }

  .blog-image:active .blog-image__wrapper {
    scale: 1.05;
  }

  .blog-image--open {
    position: fixed;
    inset: 0;
    padding: 1rem;
    display: grid;
    place-items: center;
    width: calc(100% - 2rem);
    z-index: 100;
  }

  .blog-image--open:active .blog-image__wrapper {
    scale: 0.95;
  }

  .blog-image--open .blog-image__wrapper {
    border-radius: 5px;
    margin-bottom: 2rem;
    height: 100%;
    display: flex;
  }

  .blog-image--open .blog-image__backdrop {
    position: fixed;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.4);
    backdrop-filter: blur(5px);
    cursor: pointer;
  }

  .blog-image--open .blog-image__alt {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 0 2rem;
    font-size: 1.2rem;
    color: var(--color-text);
  }

  .blog-image__action {
    position: absolute;
    appearance: none;
    background: none;
    border: none;
    padding: 0.5rem;
    margin: 0.5rem;
    transition:
      right 140ms ease-in-out,
      top 140ms ease-in-out,
      scale 70ms ease-in-out;

    right: -3rem;
    top: -3rem;
    cursor: pointer;
  }

  .blog-image__action :global(svg) {
    width: 1.5rem;
    height: 1.5rem;
  }

  .blog-image__action[aria-hidden='true'] {
    display: none;
  }

  .blog-image__action:focus,
  .blog-image__wrapper:hover .blog-image__action {
    right: 0rem;
    top: 0rem;
  }

  @media (pointer: coarse) {
    .blog-image__action {
      right: 0rem;
      top: 0rem;
    }
  }

  .blog-image__action--minimize {
    display: none !important;
  }

  .blog-image__action:focus {
    transition: none;
  }

  .blog-image__action:hover {
    scale: 1.1;
  }

  .blog-image__action:active {
    scale: 0.95;
  }

  .blog-image__action--text {
    fill: var(--color-text);
  }

  .blog-image__action--background {
    fill: var(--color-bg);
  }

  .blog-image__action--primary {
    fill: var(--color-primary);
  }

  .blog-image__action--secondary {
    fill: var(--color-secondary);
  }
</style>
