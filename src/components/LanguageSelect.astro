---
import translateIcon from '@carbon/icons/svg/32/translate.svg?raw';
import { localizePath } from 'astro-i18next';
import i18next, { t } from 'i18next';

const { pathname } = Astro.url;
const translateExcludes = [
  {
    translateKey: 'projekte/[projectSlug]',
    prefixes: ['/projekte/', '/en/projects/'],
    replace: '[projectSlug]',
  },
];

const localize = (path: string, lng: string): string => {
  let translatedUrl = path;
  for (const exclude of translateExcludes) {
    if (exclude.prefixes.some(prefix => path.startsWith(prefix))) {
      translatedUrl = localizePath(exclude.translateKey, lng);

      for (const prefix of exclude.prefixes) {
        path = path.replace(prefix, '');
      }

      translatedUrl = translatedUrl.replace(exclude.replace, path);
    }
  }

  if (translatedUrl === path) {
    // unchanged - use normal method
    translatedUrl = localizePath(path, lng);
  }

  return translatedUrl;
};
---

<div class="translate">
  <button class="translate__button" aria-label={t('common.changeLanguage')}>
    <Fragment set:html={translateIcon} />
  </button>
  <div class="language-select">
    <div class="language-select__wrapper">
      <div class="language-select__content">
        {i18next.languages.map(lng => <a href={localize(pathname, lng)}>{t(`lng.${lng}`)}</a>)}
      </div>
    </div>
  </div>
</div>

<style>
  .translate {
    width: 2rem;
    height: 2rem;
    margin: 0.4rem;
    position: relative;
  }

  .translate__button {
    cursor: pointer;
    background: none;
    width: 2rem;
    height: 2rem;
    border: 1px solid var(--color-text);
    background-color: var(--color-surface);
    padding: 2px;
    transition:
      box-shadow 70ms linear,
      translate 70ms linear;
    box-shadow:
      0px 0px 0 -1px var(--color-surface),
      0px 0px var(--color-text);
    z-index: 1;
  }

  .translate:hover .translate__button {
    translate: -3px -3px;
    background-color: var(--color-bg);
    box-shadow:
      3px 3px 0 -1px var(--color-surface),
      3px 3px var(--color-text);
  }

  .translate__button :global(svg) {
    display: block;
    width: 100%;
    height: 100%;
    fill: var(--color-text);
    transition: scale 70ms linear;
  }

  .translate__button:active :global(svg) {
    scale: 0.8;
  }

  .language-select {
    position: absolute;
    bottom: 20%;
    right: 0;
    margin-bottom: 0.5rem;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 0fr;
    opacity: 0;
    transition:
      grid-template-rows 120ms linear,
      opacity 120ms ease-in,
      bottom 120ms linear;
    pointer-events: none;
    z-index: 100;
  }

  .language-select:has(a:focus),
  .language-select.open {
    opacity: 1;
    grid-template-rows: 1fr;
    bottom: 100%;
    pointer-events: unset;
  }

  .language-select__wrapper {
    overflow: hidden;
    width: max-content;
    background: var(--color-surface);
    border: 1px solid var(--color-text);
  }

  .language-select__content {
    padding: 0.3rem 0;
    display: flex;
    flex-direction: column;
    gap: 0.3rem;
    align-items: stretch;
    text-align: center;
  }

  .language-select__content a {
    font-family: 'Mona Sans';
    color: var(--color-text);
    padding: 0.8rem 2rem;
    cursor: pointer;
  }

  .language-select__content a:hover {
    background: var(--color-bg);
  }
</style>
